// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`getPropType > detects custom validation functions for arrow function 1`] = `
{
  "name": "custom",
  "raw": "() => {}",
}
`;

exports[`getPropType > detects custom validation functions for function 1`] = `
{
  "name": "custom",
  "raw": "function() {}",
}
`;

exports[`getPropType > detects descriptions on nested types in arrayOf 1`] = `
{
  "description": "test2",
  "name": "arrayOf",
  "value": {
    "name": "string",
  },
}
`;

exports[`getPropType > detects descriptions on nested types in exacts 1`] = `
{
  "name": "exact",
  "value": {
    "bar": {
      "description": "test2",
      "name": "bool",
      "required": false,
    },
    "foo": {
      "description": "test1",
      "name": "string",
      "required": false,
    },
  },
}
`;

exports[`getPropType > detects descriptions on nested types in objectOf 1`] = `
{
  "description": "test2",
  "name": "objectOf",
  "value": {
    "name": "string",
  },
}
`;

exports[`getPropType > detects descriptions on nested types in shapes 1`] = `
{
  "name": "shape",
  "value": {
    "bar": {
      "description": "test2",
      "name": "bool",
      "required": false,
    },
    "foo": {
      "description": "test1",
      "name": "string",
      "required": false,
    },
  },
}
`;

exports[`getPropType > detects required notations of nested types in exacts 1`] = `
{
  "name": "exact",
  "value": {
    "bar": {
      "name": "bool",
      "required": false,
    },
    "foo": {
      "name": "string",
      "required": true,
    },
  },
}
`;

exports[`getPropType > detects required notations of nested types in shapes 1`] = `
{
  "name": "shape",
  "value": {
    "bar": {
      "name": "bool",
      "required": false,
    },
    "foo": {
      "name": "string",
      "required": true,
    },
  },
}
`;

exports[`getPropType > handles computed properties 1`] = `
{
  "name": "exact",
  "value": {
    "@computed#foo": {
      "name": "string",
      "required": true,
    },
    "bar": {
      "name": "bool",
      "required": false,
    },
  },
}
`;

exports[`getPropType > ignores complex computed properties 1`] = `
{
  "name": "exact",
  "value": {
    "bar": {
      "name": "bool",
      "required": false,
    },
  },
}
`;

exports[`getPropType > resolve identifier to their values > correctly resolves SpreadElements in arrays 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > correctly resolves SpreadElements in arrays from imported values 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > correctly resolves nested SpreadElements in arrays 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > does not resolve external values without proper importer 1`] = `
{
  "computed": true,
  "name": "enum",
  "value": "TYPES",
}
`;

exports[`getPropType > resolve identifier to their values > does resolve object keys values 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"FOO\\"",
    },
    {
      "computed": false,
      "value": "\\"BAR\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > does resolve object values 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > handles unresolved imported identifier to their initialization value in array 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": true,
      "value": "FOO",
    },
    {
      "computed": true,
      "value": "BAR",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > handles unresolved named imported identifier to their initialization value in array 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": true,
      "value": "FOO",
    },
    {
      "computed": true,
      "value": "BAR",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > resolves imported identifier to their initialization value in array 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > resolves imported variables to their values 1`] = `
{
  "name": "shape",
  "value": {
    "bar": {
      "name": "string",
      "required": false,
    },
  },
}
`;

exports[`getPropType > resolve identifier to their values > resolves importer identifier to initialization value 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > resolves memberExpressions 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > resolves memberExpressions from imported objects 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > resolves simple identifier to their initialization value 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > resolves simple identifier to their initialization value in array 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > resolves values from imported Object.keys call 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"FOO\\"",
    },
    {
      "computed": false,
      "value": "\\"BAR\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > resolves values from imported Object.values call 1`] = `
{
  "name": "enum",
  "value": [
    {
      "computed": false,
      "value": "\\"foo\\"",
    },
    {
      "computed": false,
      "value": "\\"bar\\"",
    },
  ],
}
`;

exports[`getPropType > resolve identifier to their values > resolves variables to their values 1`] = `
{
  "name": "shape",
  "value": {
    "bar": {
      "name": "string",
      "required": false,
    },
  },
}
`;

exports[`getPropType > works with cyclic references in shape 1`] = `
{
  "name": "shape",
  "value": "Component.propTypes",
}
`;

exports[`getPropType > works with cyclic references in shape and required 1`] = `
{
  "name": "shape",
  "value": "Component.propTypes",
}
`;

exports[`getPropType > works with missing argument 1`] = `
{
  "name": "shape",
  "value": {
    "foo": {
      "computed": true,
      "name": "shape",
      "required": false,
      "value": "",
    },
  },
}
`;
