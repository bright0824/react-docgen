// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integration fixtures processes component "class-without-id.tsx" without errors 1`] = `
[
  {
    "description": "",
    "methods": [],
    "props": {
      "value": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_1.js" without errors 1`] = `
[
  {
    "description": "The is a component to test the document generation",
    "displayName": "Component",
    "methods": [],
  },
]
`;

exports[`integration fixtures processes component "component_2.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "button",
    "methods": [
      {
        "docblock": null,
        "modifiers": [
          "static",
          "get",
        ],
        "name": "displayName",
        "params": [],
        "returns": null,
      },
      {
        "docblock": null,
        "modifiers": [
          "static",
          "get",
        ],
        "name": "defaultProps",
        "params": [],
        "returns": null,
      },
    ],
    "props": {
      "type": {
        "defaultValue": {
          "computed": false,
          "value": ""primary"",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_3.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Test",
    "methods": [],
    "props": {
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_4.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Parent",
    "methods": [],
    "props": {
      "child": {
        "description": "",
        "required": true,
        "type": {
          "computed": true,
          "name": "shape",
          "value": "Child.propTypes",
        },
      },
      "childExact": {
        "description": "",
        "required": true,
        "type": {
          "computed": true,
          "name": "exact",
          "value": "Child.propTypes",
        },
      },
      "extendedChild": {
        "description": "",
        "required": true,
        "type": {
          "name": "shape",
          "value": {
            "adopted": {
              "name": "bool",
              "required": true,
            },
          },
        },
      },
      "extendedChildExact": {
        "description": "",
        "required": true,
        "type": {
          "name": "exact",
          "value": {
            "adopted": {
              "name": "bool",
              "required": true,
            },
          },
        },
      },
      "something": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_5.js" without errors 1`] = `
[
  {
    "childContext": {
      "color": {
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
    "context": {
      "config": {
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "defaultValue": {
          "computed": false,
          "value": "{}",
        },
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_6.js" without errors 1`] = `
[
  {
    "childContext": {
      "color": {
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
    "context": {
      "config": {
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "defaultValue": {
          "computed": false,
          "value": "{}",
        },
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_7.js" without errors 1`] = `
[
  {
    "description": "The is a component to test the document generation",
    "displayName": "Component",
    "methods": [],
  },
]
`;

exports[`integration fixtures processes component "component_8.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Parent",
    "methods": [
      {
        "docblock": null,
        "modifiers": [],
        "name": "onChangeSlider",
        "params": [
          {
            "name": "[min, max]",
            "optional": false,
            "type": null,
          },
        ],
        "returns": null,
      },
    ],
  },
]
`;

exports[`integration fixtures processes component "component_9.js" without errors 1`] = `
[
  {
    "description": "Should be recognized as component.",
    "displayName": "ExampleComponent",
    "methods": [],
  },
]
`;

exports[`integration fixtures processes component "component_10.js" without errors 1`] = `
[
  {
    "description": "React component that display current time at current location.",
    "displayName": "Clock",
    "methods": [
      {
        "description": "Update clock state with new time",
        "docblock": "Update clock state with new time",
        "modifiers": [],
        "name": "updateClock",
        "params": [],
        "returns": null,
      },
      {
        "description": "Parse current Date object",
        "docblock": "Parse current Date object

@returns {Object} currentTime
   @returns {int} currentTime.hour
   @returns {int} currentTime.minutes
   @returns {string} currentTime.ampm "am" or "pm"
   @returns {string} currentTime.dayOfWeek
   @returns {string} currentTime.month
   @returns {int} currentTime.date",
        "modifiers": [],
        "name": "getTime",
        "params": [],
        "returns": {
          "description": "currentTime",
          "type": {
            "name": "Object",
          },
        },
      },
      {
        "description": "Update current clock for every 1 second",
        "docblock": "Update current clock for every 1 second",
        "modifiers": [],
        "name": "setTimer",
        "params": [],
        "returns": null,
      },
    ],
    "props": {
      "title": {
        "description": "A text display current's user identity,
 "Nobody" if no one is detected in the background,
 "Hi, ..name" if an user is detected",
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_11.js" without errors 1`] = `
[
  {
    "composes": [
      "OtherProps",
    ],
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "fooProp": {
        "description": "fooProp is spread in from a locally resolved type",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
      "prop1": {
        "description": "The first prop",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
      "prop2": {
        "description": "The second, covariant prop",
        "flowType": {
          "name": "number",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_12.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Paper",
    "methods": [],
    "props": {
      "anchorOrigin": {
        "defaultValue": {
          "computed": false,
          "value": "{
  vertical: 'top',
  horizontal: 'left',
}",
        },
        "description": "This is the point on the anchor where the popover's
\`anchorEl\` will attach to. This is not used when the
anchorReference is 'anchorPosition'.

Options:
vertical: [top, center, bottom];
horizontal: [left, center, right].",
        "flowType": {
          "name": "signature",
          "raw": "{
  horizontal: 'left' | 'center' | 'right' | number,
  vertical: 'top' | 'center' | 'bottom' | number,
}",
          "signature": {
            "properties": [
              {
                "key": "horizontal",
                "value": {
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'",
                    },
                    {
                      "name": "literal",
                      "value": "'center'",
                    },
                    {
                      "name": "literal",
                      "value": "'right'",
                    },
                    {
                      "name": "number",
                    },
                  ],
                  "name": "union",
                  "raw": "'left' | 'center' | 'right' | number",
                  "required": true,
                },
              },
              {
                "key": "vertical",
                "value": {
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'",
                    },
                    {
                      "name": "literal",
                      "value": "'center'",
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'",
                    },
                    {
                      "name": "number",
                    },
                  ],
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom' | number",
                  "required": true,
                },
              },
            ],
          },
          "type": "object",
        },
        "required": false,
      },
      "children": {
        "description": "@ignore",
        "flowType": {
          "name": "Node",
        },
        "required": false,
      },
      "classes": {
        "description": "Useful to extend the style applied to components.",
        "flowType": {
          "name": "Object",
        },
        "required": false,
      },
      "component": {
        "defaultValue": {
          "computed": false,
          "value": "'div'",
        },
        "description": "The component used for the root node.
This currently has to be flow cast in defaultProps as of flow 0.59.0",
        "flowType": {
          "name": "ElementType",
        },
        "required": false,
      },
      "elevation": {
        "defaultValue": {
          "computed": false,
          "value": "2",
        },
        "description": "Shadow depth, corresponds to \`dp\` in the spec.
It's accepting values between 0 and 24 inclusive.",
        "flowType": {
          "name": "number",
        },
        "required": false,
      },
      "labelRowsPerPage": {
        "defaultValue": {
          "computed": false,
          "value": "'Rows per page:'",
        },
        "description": "Useful to customize the rows per page label. Invoked with a \`{ from, to, count, page }\`
object.",
        "flowType": {
          "name": "Node",
        },
        "required": false,
      },
      "timeout": {
        "defaultValue": {
          "computed": false,
          "value": "300",
        },
        "description": "The duration for the transition, in milliseconds.
You may specify a single timeout for all transitions, or individually with an object.

Set to 'auto' to automatically calculate transition time based on height.",
        "flowType": {
          "elements": [
            {
              "name": "number",
            },
            {
              "name": "signature",
              "raw": "{ enter?: number, exit?: number }",
              "signature": {
                "properties": [
                  {
                    "key": "enter",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                  {
                    "key": "exit",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                ],
              },
              "type": "object",
            },
            {
              "name": "literal",
              "value": "'auto'",
            },
          ],
          "name": "union",
          "raw": "number | { enter?: number, exit?: number } | 'auto'",
        },
        "required": false,
      },
      "transition": {
        "description": "Transition component.",
        "flowType": {
          "elements": [
            {
              "name": "unknown",
            },
          ],
          "name": "ComponentType",
          "raw": "ComponentType<*>",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_13.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Foo",
    "methods": [],
    "props": {
      "RootComponent": {
        "description": "",
        "flowType": {
          "name": "ReactElementType",
          "raw": "React.ElementType",
        },
        "required": false,
      },
      "align": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "literal",
              "value": ""left"",
            },
            {
              "name": "literal",
              "value": ""center"",
            },
            {
              "name": "literal",
              "value": ""right"",
            },
            {
              "name": "literal",
              "value": ""justify"",
            },
          ],
          "name": "union",
          "raw": ""left" | "center" | "right" | "justify"",
        },
        "required": false,
      },
      "capitalize": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "center": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "children": {
        "description": "",
        "flowType": {
          "name": "ReactNode",
          "raw": "React.Node",
        },
        "required": false,
      },
      "className": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
      "color": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
      "justify": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "leading": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "literal",
              "value": ""none"",
            },
            {
              "name": "literal",
              "value": ""tight"",
            },
            {
              "name": "literal",
              "value": ""normal"",
            },
            {
              "name": "literal",
              "value": ""loose"",
            },
          ],
          "name": "union",
          "raw": ""none" | "tight" | "normal" | "loose"",
        },
        "required": false,
      },
      "leadingLoose": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "leadingNone": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "leadingNormal": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "leadingTight": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "left": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "lowercase": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "muted": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "right": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "size": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
      "tracking": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "literal",
              "value": ""tight"",
            },
            {
              "name": "literal",
              "value": ""normal"",
            },
            {
              "name": "literal",
              "value": ""wide"",
            },
          ],
          "name": "union",
          "raw": ""tight" | "normal" | "wide"",
        },
        "required": false,
      },
      "trackingNormal": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "trackingTight": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "trackingWide": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "transform": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "literal",
              "value": ""lowercase"",
            },
            {
              "name": "literal",
              "value": ""uppercase"",
            },
            {
              "name": "literal",
              "value": ""capitalize"",
            },
          ],
          "name": "union",
          "raw": ""lowercase" | "uppercase" | "capitalize"",
        },
        "required": false,
      },
      "uppercase": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "wrap": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_14.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "UncoloredView",
    "methods": [],
    "props": {
      "color": {
        "description": "",
        "flowType": {
          "name": "string",
          "nullable": true,
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_15.js" without errors 1`] = `
[
  {
    "composes": [
      "BarProps",
      "BarProps2",
      "BarProps3",
    ],
    "description": "",
    "displayName": "Foo",
    "methods": [],
    "props": {
      "other": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'a'",
        },
        "required": true,
      },
      "other2": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'b'",
        },
        "required": true,
      },
      "other3": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'c'",
        },
        "required": true,
      },
      "other4": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'g'",
        },
        "required": true,
      },
      "other5": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'f'",
        },
        "required": true,
      },
      "somePropOverride": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'baz'",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_16.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Foo",
    "methods": [],
    "props": {
      "bar": {
        "defaultValue": {
          "computed": false,
          "value": "null",
        },
        "description": "This does something.",
        "required": false,
        "type": {
          "name": "custom",
          "raw": "PropTypes.node",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_17.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Foo",
    "methods": [],
    "props": {
      "exactProp": {
        "description": "",
        "required": false,
        "type": {
          "name": "exact",
          "value": {
            "c": {
              "description": "Comment for property c",
              "name": "string",
              "required": false,
            },
            "d": {
              "name": "number",
              "required": false,
            },
          },
        },
      },
      "oneOfTypeProp": {
        "description": "",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "description": "Comment for type string",
              "name": "string",
            },
            {
              "name": "number",
            },
          ],
        },
      },
      "shapeProp": {
        "description": "",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "a": {
              "description": "Comment for property a",
              "name": "string",
              "required": false,
            },
            "b": {
              "name": "number",
              "required": false,
            },
          },
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_18.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "UncoloredView",
    "methods": [],
    "props": {
      "color": {
        "description": "",
        "flowType": {
          "name": "string",
          "nullable": true,
        },
        "required": false,
        "type": {
          "name": "string",
        },
      },
      "id": {
        "defaultValue": {
          "computed": false,
          "value": "'test-forward-ref-default'",
        },
        "description": "",
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_19.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Component",
    "methods": [],
    "props": {
      "data": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "mixed",
            },
          ],
          "name": "Array",
          "raw": "Array<mixed>",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_20.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "@computed#children": {
        "defaultValue": {
          "computed": false,
          "value": ""default"",
        },
        "description": "This is a test",
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_21.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript class component",
    "displayName": "TSComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "required": true,
        "tsType": {
          "name": "number",
        },
      },
      "baz": {
        "description": "Complex union prop",
        "required": true,
        "tsType": {
          "elements": [
            {
              "name": "number",
            },
            {
              "name": "signature",
              "raw": "{ enter?: number, exit?: number }",
              "signature": {
                "properties": [
                  {
                    "key": "enter",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                  {
                    "key": "exit",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                ],
              },
              "type": "object",
            },
            {
              "name": "literal",
              "value": "'auto'",
            },
          ],
          "name": "union",
          "raw": "number | { enter?: number, exit?: number } | 'auto'",
        },
      },
      "foo": {
        "description": "Optional prop",
        "required": false,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_22.tsx" without errors 1`] = `
[
  {
    "description": "This is a TypeScript function component",
    "displayName": "TSFunctionComponent",
    "methods": [],
    "props": {
      "align": {
        "description": "",
        "required": false,
        "tsType": {
          "elements": [
            {
              "name": "literal",
              "value": ""left"",
            },
            {
              "name": "literal",
              "value": ""center"",
            },
            {
              "name": "literal",
              "value": ""right"",
            },
            {
              "name": "literal",
              "value": ""justify"",
            },
          ],
          "name": "union",
          "raw": ""left" | "center" | "right" | "justify"",
        },
      },
      "center": {
        "description": "",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
      "justify": {
        "description": "",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
      "left": {
        "description": "",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
      "position": {
        "description": "position doc",
        "required": true,
        "tsType": {
          "name": "signature",
          "raw": "{
  /**
   * x coordinate doc
   */
  x: number,
  /**
   * y coordinate doc
   */
  y: number
}",
          "signature": {
            "properties": [
              {
                "description": "x coordinate doc",
                "key": "x",
                "value": {
                  "name": "number",
                  "required": true,
                },
              },
              {
                "description": "y coordinate doc",
                "key": "y",
                "value": {
                  "name": "number",
                  "required": true,
                },
              },
            ],
          },
          "type": "object",
        },
      },
      "right": {
        "description": "",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_23.tsx" without errors 1`] = `
[
  {
    "composes": [
      "OtherProps",
    ],
    "description": "This is a typescript class component",
    "displayName": "TSComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "required": true,
        "tsType": {
          "name": "number",
        },
      },
      "baz": {
        "description": "Complex union prop",
        "required": true,
        "tsType": {
          "elements": [
            {
              "name": "number",
            },
            {
              "name": "signature",
              "raw": "{ enter?: number, exit?: number }",
              "signature": {
                "properties": [
                  {
                    "key": "enter",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                  {
                    "key": "exit",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                ],
              },
              "type": "object",
            },
            {
              "name": "literal",
              "value": "'auto'",
            },
          ],
          "name": "union",
          "raw": "number | { enter?: number, exit?: number } | 'auto'",
        },
      },
      "foo": {
        "description": "Optional prop",
        "required": false,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_24.js" without errors 1`] = `
[
  {
    "composes": [
      "OtherProps",
    ],
    "description": "This is a flow class component with an interface as props",
    "displayName": "FlowComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "flowType": {
          "name": "number",
        },
        "required": true,
      },
      "baz": {
        "description": "Complex union prop",
        "flowType": {
          "elements": [
            {
              "name": "number",
            },
            {
              "name": "signature",
              "raw": "{ enter?: number, exit?: number }",
              "signature": {
                "properties": [
                  {
                    "key": "enter",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                  {
                    "key": "exit",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                ],
              },
              "type": "object",
            },
            {
              "name": "literal",
              "value": "'auto'",
            },
          ],
          "name": "union",
          "raw": "number | { enter?: number, exit?: number } | 'auto'",
        },
        "required": true,
      },
      "foo": {
        "description": "Optional prop",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_25.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript class component",
    "displayName": "TSComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "required": true,
        "tsType": {
          "elements": [
            {
              "name": "Child",
            },
          ],
          "name": "Array",
          "raw": "Array<X>",
        },
      },
      "baz": {
        "description": "Complex union prop",
        "required": true,
        "tsType": {
          "name": "number",
        },
      },
      "foo": {
        "description": "Optional prop",
        "required": false,
        "tsType": {
          "name": "Child",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_26.js" without errors 1`] = `
[
  {
    "description": "This is a typescript class component",
    "displayName": "FlowComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "flowType": {
          "elements": [
            {
              "name": "Child",
            },
          ],
          "name": "Array",
          "raw": "Array<X>",
        },
        "required": true,
      },
      "baz": {
        "description": "Complex union prop",
        "flowType": {
          "name": "number",
        },
        "required": true,
      },
      "foo": {
        "description": "Optional prop",
        "flowType": {
          "name": "Child",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_27.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript class component",
    "displayName": "TSComponent",
    "methods": [
      {
        "description": "This is a method",
        "docblock": "This is a method",
        "modifiers": [],
        "name": "foo",
        "params": [
          {
            "name": "a",
            "optional": false,
            "type": {
              "name": "string",
            },
          },
        ],
        "returns": {
          "type": {
            "name": "string",
          },
        },
      },
      {
        "description": "This is a public method",
        "docblock": "This is a public method",
        "modifiers": [],
        "name": "bar",
        "params": [
          {
            "name": "a",
            "optional": false,
            "type": {
              "name": "string",
            },
          },
        ],
        "returns": {
          "type": {
            "name": "string",
          },
        },
      },
    ],
    "props": {
      "foo": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_28.tsx" without errors 1`] = `
[
  {
    "description": "Example component description",
    "displayName": "ABC",
    "methods": [],
    "props": {
      "foo": {
        "defaultValue": {
          "computed": false,
          "value": "true",
        },
        "description": "Example prop description",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_29.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "prop": {
        "description": "",
        "flowType": {
          "name": "T",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_30.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "prop": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_31.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "prop": {
        "description": "",
        "flowType": {
          "name": "T",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_32.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Segments",
    "methods": [
      {
        "docblock": null,
        "modifiers": [],
        "name": "foo",
        "params": [
          {
            "name": "props",
            "optional": false,
            "type": {
              "alias": "Props",
              "name": "signature",
              "raw": "{
  segments: Array<T>,
}",
              "signature": {
                "properties": [
                  {
                    "key": "segments",
                    "value": {
                      "elements": [
                        {
                          "name": "T",
                        },
                      ],
                      "name": "Array",
                      "raw": "Array<T>",
                      "required": true,
                    },
                  },
                ],
              },
              "type": "object",
            },
          },
        ],
        "returns": null,
      },
    ],
    "props": {
      "segments": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "T",
            },
          ],
          "name": "Array",
          "raw": "Array<T>",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_33.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript component with imported prop types",
    "displayName": "ImportedExtendedComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "number",
        },
      },
      "foo": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_34.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "CustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "color": {
        "description": "",
        "required": false,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_35.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperCustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_36.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperDuperCustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_37.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperDuperCustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_38.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperDuperCustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_39.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript component with imported prop types",
    "displayName": "ImportedComponent",
    "methods": [],
    "props": {
      "foo": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_40.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperDuperCustomButton",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": {
          "computed": true,
          "value": "Sizes.EXTRA_LARGE",
        },
        "description": "",
        "required": false,
        "type": {
          "computed": true,
          "name": "enum",
          "value": "Object.values(Sizes)",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_41.tsx" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "value": {
        "description": "String value of a number",
        "required": false,
        "tsType": {
          "name": "STRING_VALS[number]",
          "raw": "typeof STRING_VALS[number]",
        },
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_42.js" without errors 1`] = `
[
  {
    "description": "",
    "methods": [],
    "props": {
      "foo": {
        "defaultValue": {
          "computed": false,
          "value": "'bar'",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "component_43.tsx" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MenuItem",
    "methods": [],
    "props": {
      "children": {
        "description": "Menu item contents.",
        "required": false,
        "type": {
          "name": "node",
        },
      },
      "classes": {
        "description": "Override or extend the styles applied to the component. See CSS API below for more details.",
        "required": false,
        "type": {
          "name": "object",
        },
      },
      "component": {
        "defaultValue": {
          "computed": false,
          "value": "'li'",
        },
        "required": false,
      },
      "disableGutters": {
        "defaultValue": {
          "computed": false,
          "value": "false",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "flow-export-type.js" without errors 1`] = `
[
  {
    "description": "This is a Flow class component",
    "displayName": "FlowComponent",
    "methods": [
      {
        "docblock": null,
        "modifiers": [],
        "name": "foo",
        "params": [
          {
            "name": "a",
            "optional": false,
            "type": {
              "name": "string",
            },
          },
        ],
        "returns": {
          "type": {
            "name": "string",
          },
        },
      },
      {
        "docblock": null,
        "modifiers": [],
        "name": "bar",
        "params": [
          {
            "name": "a",
            "optional": false,
            "type": {
              "name": "string",
            },
          },
        ],
        "returns": {
          "type": {
            "name": "string",
          },
        },
      },
    ],
    "props": {
      "foo": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "flow-import-type.js" without errors 1`] = `
[
  {
    "description": "This is a Flow component with imported prop types",
    "displayName": "ImportedComponent",
    "methods": [],
    "props": {
      "foo": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "flow-spread-import-type.js" without errors 1`] = `
[
  {
    "description": "This is a Flow component with imported prop types",
    "displayName": "ImportedExtendedComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "",
        "flowType": {
          "name": "number",
        },
        "required": true,
      },
      "foo": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration fixtures processes component "test-all-imports.tsx" without errors 1`] = `
[
  {
    "description": "This is a TS component with imported stuff",
    "displayName": "ImportedExtendedComponent",
    "methods": [],
    "props": {
      "x": {
        "defaultValue": {
          "computed": false,
          "value": ""string"",
        },
        "required": false,
      },
      "y": {
        "defaultValue": {
          "computed": false,
          "value": "'otherstring'",
        },
        "required": false,
      },
    },
  },
]
`;
